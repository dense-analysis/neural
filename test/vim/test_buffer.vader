Before:
  Save g:neural

  runtime autoload/neural.vim

  unlet! g:neural
  " let g:neural = {'buffer': {'run_key': '\<C-CR>'}}

  let g:calls = []

  function! neural#Run(prompt, options) abort
    call add(g:calls, ['neural#Run', a:prompt, a:options])
  endfunction

  " Test plug mapping
  " noremap <C-n> <Plug>(neural_buffer)

After:
  unlet! g:calls

  runtime autoload/neural/job.vim

  Restore

Execute(It should create neural scratch buffer with default settings):
  NeuralBuffer

  AssertEqual bufexists('Neural Buffer'), 1
  AssertEqual &filetype, 'neuralbuf'
  "TODO: Assert if created with new or vertical new
  AssertEqual &l:wrap, 1
  AssertEqual &l:linebreak, 1

  bdelete! Neural Buffer

Execute(It should create neural scratch buffer with arguments):
  NeuralBuffer {"name": "Test Name", "create_mode": "horizontal", "wrap": v:false}

  AssertEqual bufexists('Test Name'), 1
  AssertEqual &filetype, 'neuralbuf'
  "TODO: Assert if created with new or vertical new
  AssertEqual &l:wrap, 0
  AssertEqual &l:linebreak, 0

  bdelete! Test Name

  " Check commands and plugin mappings"
  " assert setlocal vars that were called/set? as &l:somevar

" Execute(Check custom keybinds defined):
" define new keybindings
" check local buffer keybinding"

Given neuralbuf(A Neural buffer):
  write a story
Execute(It should correctly run neural):
  NeuralRun

  AssertEqual
  \ [
  \   ['neural#Run', 'write a story', {'line': 1, 'echo': 0}],
  \ ],
  \ g:calls

Execute (Call the <Plug> mapping):
  " let g:neural = {'buffer': {'run_key': '\<C-CR>'}}
  call neural#config#Load()
  " noremap <leader>t <Plug>(neural_run)
  " inoremap <Plug>(neural_run) <leader>t<Plug>(neural_run)

  " imap <buffer> <leader>mi <Plug>(myplugin_myinsertfunction)
  " imap <buffer> <leader>t <Plug>(neural_run)
  AssertEqual g:neural.buffer.run_key, '\<CR-C>'
  nnoremap <buffer> <leader>t <Plug>(neural_run)
  inoremap <buffer> <leader>t <ESC><Plug>(neural_run)
  " Call in normal mode mapping
  normal! <leader>t
  " Enter insert mode
  startinsert
  " Call the insert mode mapping
  normal! <leader>t

  AssertEqual
  \ [
  \   ['neural#Run', 'write a story', {'line': 1, 'echo': 0}],
  \   ['neural#Run', 'write a story', {'line': 1, 'echo': 0}],
  \ ],
  \ g:calls
