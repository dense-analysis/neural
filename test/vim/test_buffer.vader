Before:
  Save g:neural

  runtime autoload/neural/job.vim

  unlet! g:neural
  let g:job_id = 0
  let g:calls = []
  let g:OutCb = {->0}
  let g:ErrCb = {->0}
  let g:ExitCb = {->0}
  let g:captured_output = ''

  function! neural#job#Start(command, options) abort
    let g:job_id += 1
    call add(g:calls, ['neural#job#Start'])

    let g:OutCb = a:options.out_cb
    let g:ErrCb = a:options.err_cb
    let g:ExitCb = a:options.exit_cb

    return g:job_id
  endfunction

  function! neural#job#IsRunning(job_id) abort
    return g:job_id == a:job_id
  endfunction

  function! neural#job#SendRaw(job_id, string) abort
    call add(g:calls, ['neural#job#SendRaw', a:job_id, a:string])
  endfunction

  function! neural#job#Stop(job_id) abort
    call add(g:calls, ['neural#job#Stop', a:job_id])
  endfunction

  redir => g:captured_output
  call neural#ResetState()

After:
  redir END

  unlet! g:job_id
  unlet! g:calls
  unlet! g:OutCb
  unlet! g:ErrCb
  unlet! g:ExitCb

  augroup WritePostGroup
    autocmd!
  augroup END

  runtime autoload/neural/job.vim


Execute(It should create a new neural buffer correctly and run):
  call neural#buffer#CreateBuffer()
  call neural#buffer#RunBuffer()

  AssertEqual
  \ [
  \   ['neural#Run', '', {'line': 1, 'echo': 0}],
  \ ],
  \ g:calls
